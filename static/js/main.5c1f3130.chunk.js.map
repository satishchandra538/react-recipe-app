{"version":3,"sources":["Recipes.js","App.js","serviceWorker.js","index.js"],"names":["Recipes","title","calories","image","healthLabels","weight","ingredients","className","src","alt","map","heathLabel","style","backgroundColor","color","borderRadius","padding","marginBottom","marginTop","ingredient","text","App","useState","search","setSearch","query","setQuery","exampleReq","recipes","setRecipes","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","recipe","label","key","totalWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAgCeA,G,MA9BC,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,MAAOC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YAS5D,OACI,yBAAKC,UAAU,UACX,4BAAKN,GACL,2BAAG,+CAA2BI,EAA9B,OAAyC,2CAAuBH,GAChE,yBAAKM,IAAKL,EAAOM,IAAKR,IACtB,wBAAIM,UAAU,eAAc,8CAA0BH,EAAaM,KAAI,SAAAC,GACnE,OACI,4BAAKA,OAGb,wBAAIJ,UAAU,cAAa,0BAAMK,MAlB3B,CACVC,gBAAiB,mBACjBC,MAAO,QACPC,aAAc,MACdC,QAAS,OACTC,aAAa,MACbC,UAAY,QAYmB,eAAuCZ,EAAYI,KAAI,SAAAS,GAC9E,OACI,4BACI,kCAAQA,EAAWC,KAAnB,MACA,8BAAOD,EAAWd,OAAlB,cCyBTgB,EA9CH,WACV,IADgB,EAGYC,mBAAS,IAHrB,mBAGTC,EAHS,KAGDC,EAHC,OAIUF,mBAAS,SAJnB,mBAITG,EAJS,KAIFC,EAJE,KAKVC,EAAU,0CAAsCF,EAAtC,mBAJD,WAIC,oBAHA,oCAFA,EAOcH,mBAAS,IAPvB,mBAOTM,EAPS,KAOAC,EAPA,KAQhBC,qBAAU,WACRC,MACC,CAACN,IAEJ,IAAMM,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMN,GADZ,cACXO,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAIjBC,QAAQC,IAAIF,GACZP,EAAWO,EAAKG,MALC,2CAAH,qDAchB,OACE,yBAAKhC,UAAU,OACb,0BAAMA,UAAU,cAAciC,SATnB,SAACC,GACdA,EAAEC,iBACFhB,EAASH,KAQL,2BAAOoB,KAAK,OAAOpC,UAAU,aAAaqC,YAAY,WAAWC,MAAOtB,EAAQuB,SANjE,SAACL,GACpBjB,EAAUiB,EAAEM,OAAOF,UAMf,4BAAQF,KAAK,SAASpC,UAAU,iBAAhC,mBAEDqB,EAAQlB,KAAI,SAAAsC,GAAM,OACjB,kBAAC,EAAD,CACE/C,MAAO+C,EAAOA,OAAOC,MACrBC,IAAKF,EAAOA,OAAOC,MACnB5C,OAAQ2C,EAAOA,OAAOG,YACtBjD,SAAU8C,EAAOA,OAAO9C,SACxBI,YAAa0C,EAAOA,OAAO1C,YAC3BH,MAAO6C,EAAOA,OAAO7C,MACrBC,aAAc4C,EAAOA,OAAO5C,oBChClBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c1f3130.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipes = ({title, calories, image, healthLabels, weight, ingredients}) => {\n    const style = {\n        backgroundColor: \"rgb(206, 90, 36)\",\n        color: \"white\",\n        borderRadius: \"2px\",\n        padding: \"10px\",\n        marginBottom:\"5px\",\n        marginTop : \"5px\"\n    }\n    return(\n        <div className=\"recipe\">\n            <h1>{title}</h1>\n            <p><span>Total weight:</span>{weight}gm  <span>Calories:</span>{calories}</p>\n            <img src={image} alt={title} />\n            <ul className=\"healthlabel\"><span>Health label</span>{healthLabels.map(heathLabel => {\n                return(\n                    <li>{heathLabel}</li>\n                )\n            })}</ul>\n            <ol className=\"ingredient\"><span style={style}>Ingredients</span>{ingredients.map(ingredient => {\n                return(\n                    <li>\n                        <span> {ingredient.text} ,</span>\n                        <span>{ingredient.weight}gm</span>\n                    </li>\n                )\n            }) }</ol>\n        </div>\n    )\n}\nexport default Recipes;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipes from './Recipes';\n\nconst App = () => {\n  const APP_ID = '80d92580';\n  const APP_KEY = 'bcf373da6c472b8211873e8a014b4a90';\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('kheer');\n  const exampleReq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const [recipes, setRecipes] = useState([]);\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(exampleReq);\n    const data = await response.json();\n    //console.log(response);\n    console.log(data)\n    setRecipes(data.hits);\n  }\n  const submit = (e) => {\n    e.preventDefault();\n    setQuery(search)\n  }\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={submit}>\n        <input type=\"text\" className=\"search-bar\" placeholder=\"Kheer...\" value={search} onChange={updateSearch} />\n        <button type=\"submit\" className=\"search-button\">Search Recipes</button>\n      </form>\n      {recipes.map(recipe => (\n        <Recipes\n          title={recipe.recipe.label}\n          key={recipe.recipe.label} \n          weight={recipe.recipe.totalWeight}\n          calories={recipe.recipe.calories} \n          ingredients={recipe.recipe.ingredients}\n          image={recipe.recipe.image}\n          healthLabels={recipe.recipe.healthLabels} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}